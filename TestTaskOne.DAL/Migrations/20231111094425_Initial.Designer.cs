// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskOne.DAL;

#nullable disable

namespace TestTaskOne.DAL.Migrations
{
    [DbContext(typeof(TestTaskContext))]
    [Migration("20231111094425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTaskOne.Core.Models.Nomenclature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nomenclatures");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.NomenclatureLink", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "NomenclatureId");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("NomenclaturesLinks");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Waybill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PurchaseCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Waybills");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.WaybillItem", b =>
                {
                    b.Property<Guid>("WaybillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WaybillId", "NomenclatureId");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("WaybillItems");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Component", b =>
                {
                    b.HasBaseType("TestTaskOne.Core.Models.Nomenclature");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Material", b =>
                {
                    b.HasBaseType("TestTaskOne.Core.Models.Nomenclature");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.NomenclatureLink", b =>
                {
                    b.HasOne("TestTaskOne.Core.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskOne.Core.Models.Product", "Product")
                        .WithMany("ElementsUsed")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.WaybillItem", b =>
                {
                    b.HasOne("TestTaskOne.Core.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTaskOne.Core.Models.Waybill", "Waybill")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("WaybillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Component", b =>
                {
                    b.HasOne("TestTaskOne.Core.Models.Nomenclature", null)
                        .WithOne()
                        .HasForeignKey("TestTaskOne.Core.Models.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Material", b =>
                {
                    b.HasOne("TestTaskOne.Core.Models.Nomenclature", null)
                        .WithOne()
                        .HasForeignKey("TestTaskOne.Core.Models.Material", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Product", b =>
                {
                    b.Navigation("ElementsUsed");
                });

            modelBuilder.Entity("TestTaskOne.Core.Models.Waybill", b =>
                {
                    b.Navigation("PurchaseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
